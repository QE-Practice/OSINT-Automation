import os
import re
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from docx import Document
from docx.shared import Inches

# Path to the OSINT report Word template
word_template_path = r'C:\Users\gj115602\Downloads\OSINT_report_template.docx'

# Path to save the updated Word document
screenshot_folder = r'D:\Python Automation\OSINT Automation\Screenshots'

# Company name to replace in the document
new_company_name = "Facebook"
current_date = datetime.now().strftime("%B %d, %Y")  # Format: 'October 14, 2024'


# Function to replace text in paragraphs, runs, tables, headers, and footers
def replace_text_in_doc(doc, old_text, new_text):
    pattern = re.compile(re.escape(old_text), re.IGNORECASE)
    found = False

    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            normalized_text = re.sub(r'\s+', ' ', run.text.strip())
            if pattern.search(normalized_text):
                run.text = pattern.sub(new_text, run.text)
                found = True

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                        if pattern.search(normalized_text):
                            run.text = pattern.sub(new_text, run.text)
                            found = True

    for section in doc.sections:
        header = section.header
        for paragraph in header.paragraphs:
            for run in paragraph.runs:
                normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                if pattern.search(normalized_text):
                    run.text = pattern.sub(new_text, run.text)
                    found = True

        footer = section.footer
        for paragraph in footer.paragraphs:
            for run in paragraph.runs:
                normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                if pattern.search(normalized_text):
                    run.text = pattern.sub(new_text, run.text)
                    found = True

    if not found:
        print(f"No instances of '{old_text}' found in the document.")


# Function to initialize the WebDriver
def initialize_driver():
    chrome_options = Options()
    chrome_options.add_argument("--incognito")
    # Start Chrome WebDriver using WebDriverManager
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.maximize_window()
    return driver


# Function to go to SecurityHeaders.com, scan a site, and take a screenshot
def scan_security_headers(driver, url_to_scan, screenshot_folder):
    # Go to www.securityheaders.com
    driver.get("https://securityheaders.com/")
    time.sleep(2)

    # Find the input box with ID 'q' and pass the target URL
    search_box = driver.find_element(By.ID, "q")
    search_box.send_keys(url_to_scan)
    time.sleep(1)

    # Find the Scan button and click it
    scan_button = driver.find_element(By.XPATH, "//input[@id='scan']")
    scan_button.click()
    time.sleep(2)

    # Scroll down to the Security Headers section
    security_headers_section = driver.find_element(By.XPATH, "//div[normalize-space()='Security Report Summary']")
    driver.execute_script("arguments[0].scrollIntoView();", security_headers_section)
    time.sleep(2)

    # Generate a dynamic filename for the screenshot using the current timestamp
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_filename = f"screenshot_security_headers_{timestamp}.png"
    screenshot_path = os.path.join(screenshot_folder, screenshot_filename)

    # Capture screenshot and save it to the dynamically generated path
    driver.save_screenshot(screenshot_path)

    return screenshot_path


# Function to check DMARC record and take a screenshot
def check_dmarc_record(driver, url_to_scan, screenshot_folder):
    # Go to mxtoolbox.com DMARC check
    driver.get("https://mxtoolbox.com/SuperTool.aspx?action=dmarc%3a" + url_to_scan)
    time.sleep(3)

    # Scroll to the specified element
    element_to_scroll_to = driver.find_element(By.XPATH, "//div[@class='tool-result-body']//div[3]")
    driver.execute_script("arguments[0].scrollIntoView();", element_to_scroll_to)
    time.sleep(1)  # Allow time for the scrolling animation

    # Take a screenshot of the DMARC check results
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_filename = f"screenshot_dmarc_{timestamp}.png"
    screenshot_path = os.path.join(screenshot_folder, screenshot_filename)

    driver.save_screenshot(screenshot_path)

    return screenshot_path


# Function to insert all screenshots into the Word document
def insert_all_screenshots_in_word(doc_template_path, new_company_name, current_date, screenshot_paths, output_folder):
    # Open the existing Word document
    document = Document(doc_template_path)

    # Replace the placeholder company name and date in the document
    replace_text_in_doc(document, "Greenroads", new_company_name)
    replace_text_in_doc(document, "Date Placeholder", current_date)

    # Define sections and explanations for each screenshot
    sections = [
        {"heading": "Security Headers",
         "paragraph": "The following section provides a security header scan summary of the target website using SecurityHeaders.com.",
         "screenshot": screenshot_paths.get('security_headers')},

        {"heading": "DMARC Record Check",
         "paragraph": "The following section provides the results of the DMARC record check for the target domain using MXToolbox.",
         "screenshot": screenshot_paths.get('dmarc')}
    ]

    # Insert the screenshots and their respective headings and paragraphs
    for section in sections:
        if section["screenshot"]:  # Ensure that screenshot paths exist before attempting to insert them
            document.add_heading(section["heading"], level=1)
            document.add_paragraph(section["paragraph"])
            document.add_picture(section["screenshot"], width=Inches(6))

    # Generate a dynamic filename for the updated Word document
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    updated_report_filename = f'{timestamp}_OSINT_report_{new_company_name}.docx'
    updated_report_path = os.path.join(output_folder, updated_report_filename)

    # Save the updated Word document
    document.save(updated_report_path)

    return updated_report_path


# Main function to execute all tests
def main():
    url_to_scan = "www.facebook.com"

    # Initialize the WebDriver
    driver = initialize_driver()

    # Scan Security Headers and take a screenshot
    security_headers_screenshot_path = scan_security_headers(driver, url_to_scan, screenshot_folder)

    # Check DMARC record and take a screenshot
    dmarc_screenshot_path = check_dmarc_record(driver, url_to_scan, screenshot_folder)

    # Store the screenshot paths in a dictionary
    screenshot_paths = {
        "security_headers": security_headers_screenshot_path,
        "dmarc": dmarc_screenshot_path
    }

    # Insert the screenshots into the Word document
    updated_report_path = insert_all_screenshots_in_word(
        word_template_path, new_company_name, current_date, screenshot_paths, screenshot_folder
    )

    print(f"Updated OSINT report saved at: {updated_report_path}")

    # Close the WebDriver after completing all tasks
    driver.quit()


# Execute the main function
if __name__ == "__main__":
    main()
