import os
import re
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from docx import Document
from docx.shared import Inches

# Path to the OSINT report Word template
word_template_path = r'C:\Users\gj115602\Downloads\OSINT_report_template.docx'

# Path to save the updated Word document
screenshot_folder = r'D:\Python Automation\OSINT Automation\Screenshots'

# Company name to replace in the document
new_company_name = "Facebook"
current_date = datetime.now().strftime("%B %d, %Y")  # Format: 'October 14, 2024'


# Function to replace text in paragraphs, runs, tables, headers, and footers
def replace_text_in_doc(doc, old_text, new_text):
    pattern = re.compile(re.escape(old_text), re.IGNORECASE)
    found = False

    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            normalized_text = re.sub(r'\s+', ' ', run.text.strip())
            if pattern.search(normalized_text):
                run.text = pattern.sub(new_text, run.text)
                found = True

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                        if pattern.search(normalized_text):
                            run.text = pattern.sub(new_text, run.text)
                            found = True

    for section in doc.sections:
        header = section.header
        for paragraph in header.paragraphs:
            for run in paragraph.runs:
                normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                if pattern.search(normalized_text):
                    run.text = pattern.sub(new_text, run.text)
                    found = True

        footer = section.footer
        for paragraph in footer.paragraphs:
            for run in paragraph.runs:
                normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                if pattern.search(normalized_text):
                    run.text = pattern.sub(new_text, run.text)
                    found = True

    if not found:
        print(f"No instances of '{old_text}' found in the document.")


# Function to initialize the WebDriver
def initialize_driver():
    chrome_options = Options()
    chrome_options.add_argument("--incognito")
    # Start Chrome WebDriver using WebDriverManager
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.maximize_window()
    return driver


# Helper function to capture screenshots with timestamps
def capture_screenshot_with_timestamp(driver, folder_path, description):
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_filename = f"screenshot_{description}_{timestamp}.png"
    screenshot_path = os.path.join(folder_path, screenshot_filename)
    driver.save_screenshot(screenshot_path)
    return screenshot_path


# Function to go to SecurityHeaders.com, scan a site, and take a screenshot
def scan_security_headers(driver, url_to_scan, screenshot_folder):
    driver.get("https://securityheaders.com/")
    time.sleep(2)

    search_box = driver.find_element(By.ID, "q")
    search_box.send_keys(url_to_scan)
    time.sleep(1)

    scan_button = driver.find_element(By.XPATH, "//input[@id='scan']")
    scan_button.click()
    time.sleep(2)

    security_headers_section = driver.find_element(By.XPATH, "//div[normalize-space()='Security Report Summary']")
    driver.execute_script("arguments[0].scrollIntoView();", security_headers_section)
    time.sleep(2)

    screenshot_path = capture_screenshot_with_timestamp(driver, screenshot_folder, "security_headers")
    return screenshot_path


# Function to check DKIM record and take a screenshot
def check_dkim_record(driver, domain, selector, screenshot_folder):
    driver.get("https://mxtoolbox.com/DKIM.aspx")
    time.sleep(2)

    domain_input = driver.find_element(By.ID, "ctl00_ContentPlaceHolder1_ucToolhandler_txtToolInput")
    selector_input = driver.find_element(By.ID, "ctl00_ContentPlaceHolder1_ucToolhandler_txtSelector")

    domain_input.send_keys(domain)
    selector_input.send_keys(selector)
    time.sleep(1)

    lookup_button = driver.find_element(By.ID, "ctl00_ContentPlaceHolder1_ucToolhandler_btnAction")
    lookup_button.click()
    time.sleep(5)

    result_section = driver.find_element(By.XPATH, "//span[@id='lblResult']")
    driver.execute_script("arguments[0].scrollIntoView();", result_section)
    time.sleep(2)

    screenshot_path = capture_screenshot_with_timestamp(driver, screenshot_folder, "dkim")
    return screenshot_path


# Function to check DMARC record and take a screenshot
def check_dmarc_record(driver, url_to_scan, screenshot_folder):
    driver.get("https://mxtoolbox.com/SuperTool.aspx?action=dmarc%3a" + url_to_scan)
    time.sleep(3)

    element_to_scroll_to = driver.find_element(By.XPATH, "//div[@class='tool-result-body']//div[3]")
    driver.execute_script("arguments[0].scrollIntoView();", element_to_scroll_to)
    time.sleep(1)

    screenshot_path = capture_screenshot_with_timestamp(driver, screenshot_folder, "dmarc")
    return screenshot_path


# Function to perform an Nmap scan using an online tool and take a screenshot
def nmap_scan(driver, url_to_scan, screenshot_folder):
    driver.get('https://hackertarget.com/nmap-online-port-scanner/')
    time.sleep(3)
    driver.execute_script("window.scrollBy(0, 500);")

    website = driver.find_element(By.XPATH, "//input[@placeholder='IP address to scan...']")
    website.send_keys(url_to_scan)

    QuickNmapScan = driver.find_element(By.ID, 'clickform')
    QuickNmapScan.click()

    time.sleep(3)
    driver.execute_script("window.scrollBy(0, 200);")

    screenshot_path = capture_screenshot_with_timestamp(driver, screenshot_folder, "nmap")
    return screenshot_path


# Function to scan SPF record and take a screenshot
def spf_record(driver, url_to_scan, screenshot_folder):
    driver.get('https://mxtoolbox.com/')
    time.sleep(3)

    websitelink = driver.find_element(By.ID, 'ctl00_ContentPlaceHolder1_ucToolhandler_txtToolInput')
    websitelink.send_keys(url_to_scan)

    mxlookupbtn = driver.find_element(By.ID, 'ctl00_ContentPlaceHolder1_ucToolhandler_btnAction')
    mxlookupbtn.click()
    time.sleep(5)

    click_scroll = driver.find_element(By.XPATH, '//*[@id="btnAction4"]/span')
    click_scroll.click()
    time.sleep(3)

    select_spf = driver.find_element(By.XPATH, '//*[@id="picker2"]/div/div/ul/div/li[8]/a/div')
    select_spf.click()
    time.sleep(3)

    click_spfrecord = driver.find_element(By.ID, 'btnAction3')
    click_spfrecord.click()
    time.sleep(5)

    driver.execute_script("window.scrollBy(0, 300);")
    time.sleep(3)

    screenshot_path = capture_screenshot_with_timestamp(driver, screenshot_folder, "spf_record")
    return screenshot_path


# Function to insert all screenshots into the Word document
def insert_all_screenshots_in_word(doc_template_path, new_company_name, current_date, screenshot_paths, output_folder):
    document = Document(doc_template_path)

    replace_text_in_doc(document, "Greenroads", new_company_name)
    replace_text_in_doc(document, "Date Placeholder", current_date)

    sections = [
        {"heading": "Security Headers", "paragraph": "Security header scan summary.",
         "screenshot": screenshot_paths.get('security_headers')},
        {"heading": "Nmap Scan", "paragraph": "Nmap port scan results.", "screenshot": screenshot_paths.get('nmap')},
        {"heading": "SPF Record", "paragraph": "SPF record lookup result.", "screenshot": screenshot_paths.get('spf')},
        {"heading": "DMARC Record Check", "paragraph": "DMARC record check results.",
         "screenshot": screenshot_paths.get('dmarc')},
        {"heading": "DKIM Record Check", "paragraph": "DKIM record check results.",
         "screenshot": screenshot_paths.get('dkim')}
    ]

    for section in sections:
        if section["screenshot"]:
            document.add_heading(section["heading"], level=1)
            document.add_paragraph(section["paragraph"])
            document.add_picture(section["screenshot"], width=Inches(6))

    timestamp = time.strftime("%Y%m%d-%H%M%S")
    updated_report_filename = f'{timestamp}_OSINT_report_{new_company_name}.docx'
    updated_report_path = os.path.join(output_folder, updated_report_filename)

    document.save(updated_report_path)

    return updated_report_path


# Main function to execute all tests
def main():
    url_to_scan = "www.facebook.com"
    driver = initialize_driver()

    print('Security_headers Started')
    security_headers_screenshot_path = scan_security_headers(driver, url_to_scan, screenshot_folder)
    print('Dmarc Record Lookup Started')
    dmarc_screenshot_path = check_dmarc_record(driver, url_to_scan, screenshot_folder)
    print('Dkim Record Lookup Started')
    dkim_screenshot_path = check_dkim_record(driver, url_to_scan, "default", screenshot_folder)
    print('NMAP Scan started')
    nmap_screenshot_path = nmap_scan(driver, url_to_scan, screenshot_folder)
    print('SPF Record Lookup Started')
    spf_screenshot_path = spf_record(driver, url_to_scan, screenshot_folder)

    screenshot_paths = {
        "security_headers": security_headers_screenshot_path,
        "dmarc": dmarc_screenshot_path,
        "dkim": dkim_screenshot_path,
        "nmap": nmap_screenshot_path,
        "spf": spf_screenshot_path
    }

    updated_report_path = insert_all_screenshots_in_word(word_template_path, new_company_name, current_date,
                                                         screenshot_paths, screenshot_folder)
    print(f"Updated OSINT report saved at: {updated_report_path}")

    driver.quit()


# Execute the main function
if __name__ == "__main__":
    main()
