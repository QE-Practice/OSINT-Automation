import os
import re
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from docx import Document
from docx.shared import Inches

# Path to the OSINT report Word template
word_template_path = r'C:\Users\gj115602\Downloads\OSINT_report_template.docx'

# Path to save the updated Word document
screenshot_folder = r'D:\Python Automation\OSINT Automation\Screenshots'

# Path to your Edge WebDriver and Wappalyzer extension
edge_driver_path = r'D:\Python Automation\OSINT Automation\msedgedriver.exe'

wappalyzer_extension_path = r'D:\Python Automation\OSINT Automation\Extensions\a02842b4-e272-4cff-937d-aee0e0ce3d5c.crx'

# Company name to replace in the document
new_company_name = "Facebook"
current_date = datetime.now().strftime("%B %d, %Y")  # Format: 'October 14, 2024'


# Function to replace text in paragraphs, runs, tables, headers, and footers
def replace_text_in_doc(doc, old_text, new_text):
    pattern = re.compile(re.escape(old_text), re.IGNORECASE)
    found = False

    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            normalized_text = re.sub(r'\s+', ' ', run.text.strip())
            if pattern.search(normalized_text):
                run.text = pattern.sub(new_text, run.text)
                found = True

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                        if pattern.search(normalized_text):
                            run.text = pattern.sub(new_text, run.text)
                            found = True

    for section in doc.sections:
        header = section.header
        for paragraph in header.paragraphs:
            for run in paragraph.runs:
                normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                if pattern.search(normalized_text):
                    run.text = pattern.sub(new_text, run.text)
                    found = True

        footer = section.footer
        for paragraph in footer.paragraphs:
            for run in paragraph.runs:
                normalized_text = re.sub(r'\s+', ' ', run.text.strip())
                if pattern.search(normalized_text):
                    run.text = pattern.sub(new_text, run.text)
                    found = True

    if not found:
        print(f"No instances of '{old_text}' found in the document.")


# Function to visit a website, trigger Wappalyzer, and take a screenshot
# def visit_website_and_take_wappalyzer_screenshot(url_to_scan, driver_path, extension_path, screenshot_folder):
#     service = Service(driver_path)
#     edge_options = webdriver.EdgeOptions()
#     edge_options.add_argument("--inprivate")

#     # Start Edge WebDriver
#     driver = webdriver.Edge(service=service, options=edge_options)
#     driver.get(url_to_scan)
#     time.sleep(5)  # Wait for the page to load

#     # Ensure the browser is in focus and activate the Wappalyzer extension using keyboard shortcut (Ctrl + Shift + W)
#     driver.switch_to.active_element.click()
#     actions = ActionChains(driver)
#     actions.key_down(Keys.CONTROL).key_down(Keys.SHIFT).send_keys('W').key_up(Keys.SHIFT).key_up(Keys.CONTROL).perform()

#     # Add a slight delay to ensure the extension activates
#     time.sleep(3)

#     # Take a screenshot
#     timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
#     screenshot_filename = f"screenshot_wappalyzer_{timestamp}.png"
#     screenshot_path = os.path.join(screenshot_folder, screenshot_filename)

#     driver.save_screenshot(screenshot_path)
#     driver.quit()

#     return screenshot_path

# Function to go to SecurityHeaders.com, scan a site, and take a screenshot
def scan_security_headers_and_take_screenshot(url_to_scan, driver_path, screenshot_folder):
    service = Service(driver_path)
    edge_options = webdriver.EdgeOptions()
    edge_options.add_argument("--inprivate")
    driver = webdriver.Edge(service=service, options=edge_options)

    # Go to www.securityheaders.com
    driver.get("https://securityheaders.com/")
    time.sleep(2)

    # Maximize the browser window
    driver.maximize_window()

    # Find the input box with ID 'q' and pass the target URL
    search_box = driver.find_element(By.ID, "q")
    search_box.send_keys(url_to_scan)
    time.sleep(1)

    # Find the Scan button and click it
    scan_button = driver.find_element(By.XPATH, "//input[@id='scan']")
    scan_button.click()
    time.sleep(2)

    # Scroll down to the Security Headers section
    security_headers_section = driver.find_element(By.XPATH, "//div[normalize-space()='Security Report Summary']")
    driver.execute_script("arguments[0].scrollIntoView();", security_headers_section)
    time.sleep(2)

    # Generate a dynamic filename for the screenshot using the current timestamp
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_filename = f"screenshot_{timestamp}.png"
    screenshot_path = os.path.join(screenshot_folder, screenshot_filename)

    # Capture screenshot and save it to the dynamically generated path
    driver.save_screenshot(screenshot_path)

    # Close the WebDriver after taking the screenshot
    driver.quit()

    return screenshot_path


# Function to check DMARC record and take a screenshot
def check_dmarc_record_and_take_screenshot(url_to_scan, driver_path, screenshot_folder):
    service = Service(driver_path)
    edge_options = webdriver.EdgeOptions()
    driver = webdriver.Edge(service=service, options=edge_options)

    # Go to mxtoolbox.com DMARC check
    driver.get("https://mxtoolbox.com/SuperTool.aspx?action=dmarc%3a" + url_to_scan)
    time.sleep(3)

    # Maximize the browser window
    driver.maximize_window()

    # Scroll to the specified element
    element_to_scroll_to = driver.find_element(By.XPATH, "//div[@class='tool-result-body']//div[3]")
    driver.execute_script("arguments[0].scrollIntoView();", element_to_scroll_to)
    time.sleep(1)  # Allow time for the scrolling animation

    # Take a screenshot of the DMARC check results
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_filename = f"screenshot_dmarc_{timestamp}.png"
    screenshot_path = os.path.join(screenshot_folder, screenshot_filename)

    driver.save_screenshot(screenshot_path)
    driver.quit()

    return screenshot_path


# Function to insert all screenshots into the Word document
def insert_all_screenshots_in_word(doc_template_path, new_company_name, current_date, screenshot_paths, output_folder):
    # Open the existing Word document
    document = Document(doc_template_path)

    # Replace the placeholder company name and date in the document
    replace_text_in_doc(document, "Greenroads", new_company_name)
    replace_text_in_doc(document, "Date Placeholder", current_date)

    # Define sections and explanations for each screenshot
    sections = [
        {"heading": "Wappalyzer Analysis",
         "paragraph": "The following section provides a summary of the web technologies detected on the target website using the Wappalyzer tool.",
         "screenshot": screenshot_paths.get('wappalyzer')},

        {"heading": "Security Headers",
         "paragraph": "The following section provides a security header scan summary of the target website using SecurityHeaders.com.",
         "screenshot": screenshot_paths.get('security_headers')},

        {"heading": "DMARC Record Check",
         "paragraph": "The following section provides the results of the DMARC record check for the target domain using MXToolbox.",
         "screenshot": screenshot_paths.get('dmarc')}
    ]

    # Insert the screenshots and their respective headings and paragraphs
    for section in sections:
        if section["screenshot"]:  # Ensure that screenshot paths exist before attempting to insert them
            document.add_heading(section["heading"], level=1)
            document.add_paragraph(section["paragraph"])
            document.add_picture(section["screenshot"], width=Inches(6))

    # Generate a dynamic filename for the updated Word document
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    updated_report_filename = f'{timestamp}_OSINT_report_{new_company_name}.docx'
    updated_report_path = os.path.join(output_folder, updated_report_filename)

    # Save the updated Word document
    document.save(updated_report_path)

    return updated_report_path


# Main execution flow: Security Headers scan, check DMARC, take screenshots, and insert them into the Word report
url_to_scan = "www.facebook.com"
# wappalyzer_screenshot_path = visit_website_and_take_wappalyzer_screenshot(url_to_scan, edge_driver_path, wappalyzer_extension_path, screenshot_folder)
security_headers_screenshot_path = scan_security_headers_and_take_screenshot(url_to_scan, edge_driver_path,
                                                                             screenshot_folder)
dmarc_screenshot_path = check_dmarc_record_and_take_screenshot(url_to_scan, edge_driver_path, screenshot_folder)

# Dictionary to hold all screenshot paths (Wappalyzer screenshot commented out)
screenshot_paths = {
    # 'wappalyzer': wappalyzer_screenshot_path,
    'security_headers': security_headers_screenshot_path,
    'dmarc': dmarc_screenshot_path
}

# Insert all the screenshots into the Word document
updated_report_path = insert_all_screenshots_in_word(
    word_template_path,
    new_company_name,
    current_date,
    screenshot_paths,
    screenshot_folder
)
